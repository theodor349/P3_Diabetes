@if (data != null && NotificationDatas != null)
{
    <div class="detailedSecondaryView">
        <div>
            <div>
                <BatteryIcon BatteryStatus="data.BatteryStatus"></BatteryIcon>
            </div>
            @if (data.BatteryStatus == -1)
            {
                <p> @noValue</p>
            }
            else
            {
                <p>@String.Format(CultureInfo.InvariantCulture, "{0:0}", data.BatteryStatus)%</p>
            }
        </div>
        <div>
            <div>
                <InsulinIcon InsulinStatus="data.InsulinStatus"></InsulinIcon>
            </div>
            @if (data.InsulinStatus == -1)
            {
                <p> @noValue</p>
            }
            else
            {
                <p>@String.Format(CultureInfo.InvariantCulture, "{0:0}", data.InsulinStatus)%</p>
            }
        </div>
    </div>

    <div class="detailedMainView">
        <BloodGlucoseNumber isEU="isEU" EUValue="data.BloodGlucose" IsOutOfThreshold="@IsOutOfThreshold()" LastRecieved="data.LastReceived"></BloodGlucoseNumber>
        <div>
            <div>
                <p style="@(Minutes(data.LastReceived) > 30 ? "color: #FF4A47" : "")">@(MinutesString(data.LastReceived))m</p>
            </div>
            <div>
                @if (data.BloodGlucose != -1)
                {
                    <DeltaIcon Status="data.Status"></DeltaIcon>
                }
            </div>
        </div>
    </div>
    <p class="bloodGlucoseStatus">@GetStatusMessage()</p>
}

@code {
    [Parameter] public PumpData data { get; set; }
    [Parameter] public List<NotificationData> NotificationDatas { get; set; }
    [Parameter] public bool isEU { get; set; }
    private string noValue = "N/A";

    private int Minutes(DateTime lastRecieved)
    {
        var diff = DateTime.Now - lastRecieved;
        var minutes = diff.Minutes + diff.Hours * 60 + diff.Days * 1440;
        return minutes;
    }

    private string MinutesString(DateTime lastRecieved)
    {
        var diff = DateTime.Now - lastRecieved;
        var minutes = diff.Minutes + diff.Hours * 60 + diff.Days * 1440;
        if (minutes > 99)
            return ">99";
        else
            return minutes.ToString();
    }

    private string GetStatusMessage()
    {
        var r = "Blood sugar stable";
        foreach (var n in NotificationDatas)
        {
            if (n.ThresholdType == ThresholdType.High)
            {
                if (data.BloodGlucose > n.Threshold)
                {
                    r = "Blood sugar high";
                }
            }
            else
            {
                if (data.BloodGlucose < n.Threshold)
                {
                    r = "Blood sugar low";
                }
            }
        }
        return r;
    }
    private bool IsOutOfThreshold() {
        bool IsOutOfThreshold = false;
        foreach (var n in NotificationDatas)
        {
            if (n.ThresholdType == ThresholdType.High)
            {
                if (data.BloodGlucose > n.Threshold)
                {
                    IsOutOfThreshold = true;
                }
            }
            else
            {
                if (data.BloodGlucose < n.Threshold)
                {
                    IsOutOfThreshold = true;
                }
            }
        }
        return IsOutOfThreshold;
    }
}
