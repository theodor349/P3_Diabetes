@inject INetworkHelper Network

<div class="editAccount">
    <form>
        <label>First Name</label>
        <input type="text" @bind="newFirstName" />
        <label>Last Name</label>
        <input type="text" @bind="newLastName" />

        <div class="twoBtns toggleable">
            @if (IsEU) {
                <div class="active">mmol/L</div>
                <div @onclick="() => IsEU = false">mg/dL</div>
            } else {
                <div @onclick="() => IsEU = true">mmol/L</div>
                <div class="active">mg/dL</div>
            }
        </div>
        <button type="button" @onclick="UpdateAccount" class="SaveNotesBtn">Save</button>
    </form>
    <button type="button" value="Delete Account" class="deleteAccBtn">Delete Account</button>
</div>

@code {
    [Parameter] public LoginUser user { get; set; }
    [Parameter] public EventCallback<LoginUser> accountUpdated { get; set; }

    private string newFirstName;
    private string newLastName;
    private bool IsEU;
    private bool load = true;

    protected override async Task OnInitializedAsync() {
        newFirstName = user.FirstName;
        newLastName = user.LastName;
        IsEU = user.UnitOfMeasure;
    }

    private async Task UpdateAccount() {
        if (await Network.UpdateAccount(newFirstName, newLastName, IsEU)) {
            await accountUpdated.InvokeAsync(await Network.GetUserData());
        }
    }
}