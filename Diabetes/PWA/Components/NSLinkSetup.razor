@inject INetworkHelper Network

@if (string.IsNullOrWhiteSpace(user.NSLink))
{
    <EditForm Model="@link" OnValidSubmit="@HandleValidSubmit">
        @*<ValidationSummary />*@
        <br />
        @if (showBadConnection)
        {
            <div class="badConnection">
                <label>Link not reachable</label>
            </div>
        }
        <div class="nsLinkLable">
            <label>Insert valid Nightscout link</label>
        </div>
        <div class="center">
            <InputText id="nsLink" placeholder="Nighscout Link" @bind-Value="link" />
        </div>
        <br />
        <div class="center">
            <div class="addNsLinkBtn" @onclick="HandleValidSubmit">Submit</div>
        </div>
    </EditForm>
}
else
{
<div class="NSBox">
    <br />
    <div class="nsLinkLable">
        <p>Nightscout link</p>
    </div>
    <div class="nsLink">
        <p>@user.NSLink</p>
    </div>
    <div class="addNsLinkBtn" @onclick="RemoveLink">
        <p>Remove</p>
    </div>

    <hr class="NShr" />

    <div class="BSnotes">
        <form class="NSForm">
            <label for="HighBSNotes">High Blood Sugar Notes:</label><br />
            <textarea class="submissionfield" type="text" id="LowBSNotes" placeholder="Insert personal notes..."></textarea>
            <p>High Blood Sugar Threshold:</p>
            <input type="range" name="High" min="0" max="20" oninput="this.nextElementSibling.value = this.value">
            <output>10</output>

            <label for="LowBSNotes" style="margin-top:10px;">Low Blood Sugar Notes:</label><br />
            <textarea class="submissionfield" type="text" id="LowBSNotes" placeholder="Insert personal notes..."></textarea>
            <p>Low Blood Sugar Threshold:</p>
            <input type="range" name="Low" min="0" max="20" oninput="this.nextElementSibling.value = this.value">
            <output>10</output>

            <input class="SaveNotesBtn" type="submit" value="Save Notes">
        </form>
    </div>

    <div>
     
     
        
    </div>
</div>
}


@code {

    [Parameter] public LoginUser user { get; set; }
    private string link;
    private bool showBadConnection = false;

    protected override async Task OnInitializedAsync()
    {
        link = user.NSLink;
    }

    private async Task RemoveLink()
    {
        if (await Network.UpdateNSLink(""))
        {
            user.NSLink = "";
        }
    }

    private async Task HandleValidSubmit()
    {
        string newNSLink = link.Trim().Trim('/');
        if (!string.IsNullOrWhiteSpace(newNSLink) && await Network.UpdateNSLink(newNSLink))
        {
            user.NSLink = newNSLink;
        }
        else
        {
            showBadConnection = true;
        }
    }
}
