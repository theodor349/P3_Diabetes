@if (string.IsNullOrWhiteSpace(user.NSLink))
{
    <EditForm Model="@link" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
        @*<ValidationSummary />*@
        @if (showBadConnection)
        {
            <div>
                <p>It was not possible to connect to the link</p>
            </div>
        }
        <div>
            <p>Insert valid Nightscout link</p>
        </div>
        <InputText id="nsLink" placeholder="Nighscout Link" @bind-Value="link" />
        <br />
        <button class="notificationBtn" type="submit" value="Submit">Submit</button>
    </EditForm>
}
else
{
    <div>
        <p>Nightscout link</p>
    </div>
    <div>
        <p>@user.NSLink</p>
    </div>
    <div @onclick="RemoveLink">
        <p>Remove</p>
    </div>
}

@code {

    [Parameter] public LoginUser user { get; set; }
    private string link;
    private bool showBadConnection = false;

    protected override async Task OnInitializedAsync()
    {
        link = user.NSLink;
    }

    private async Task<bool> IsValidConnection(string link)
    {
        return false;
    }

    private void RemoveLink()
    {
        user.NSLink = "";
    }

    private async Task HandleValidSubmit()
    {
        if (await IsValidConnection(link))
        {
            user.NSLink = link;
        }
        else
        {
            showBadConnection = true;
        }
    }
}
