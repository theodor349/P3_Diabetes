@inject INetworkHelper Network

@if (string.IsNullOrWhiteSpace(user.NSLink)) {
    <EditForm Model="@link" OnValidSubmit="@HandleValidSubmit">
        @*<ValidationSummary />*@
        <br />
        @if (showBadConnection) {
            <div class="badConnection">
                <label>Link not reachable</label>
            </div>
        }
        <div class="nsLinkLable">
            <label>Insert valid Nightscout link</label>
        </div>
        <div class="center">
            <InputText id="nsLink" placeholder="Nighscout Link" @bind-Value="link" />
        </div>
        <br />
        <div class="center">
            <div class="addNsLinkBtn" @onclick="HandleValidSubmit">Submit</div>
        </div>
    </EditForm>
} else {
    <div class="NSBox">
        <br />
        <div class="nsLinkLable">
            <p>Nightscout link</p>
        </div>
        <div class="nsLink">
            <p>@user.NSLink</p>
        </div>
        <div class="addNsLinkBtn" @onclick="RemoveLink">
            <p>Remove</p>
        </div>
        <hr class="NShr" />

        <div class="BSnotes">
            <EditForm Model="@nSettings">
                <label for="HighBSNotes">High Blood Sugar Notes:</label><br />
                <InputTextArea @bind-Value="nSettings.noteHigh"></InputTextArea>
                <p>High Blood Sugar Threshold:</p>
                <div class="slidercontainer">
                    <input type="range" class="slider" @bind="nSettings.thresholdHigh" step="0.1" min="6.5" max="15" oninput="this.nextElementSibling.value = this.value">
                    <output>@nSettings.thresholdHigh</output>
                </div>

                <label for="LowBSNotes" style="margin-top:15px;">Low Blood Sugar Notes:</label><br />
                <InputTextArea @bind-Value="nSettings.noteLow"></InputTextArea>
                <p>Low Blood Sugar Threshold:</p>
                <div class="slidercontainer">
                    <input type="range" class="slider" @bind="nSettings.thresholdLow" step="0.1" min="0" max="6.5" oninput="this.nextElementSibling.value = this.value">
                    <output>@nSettings.thresholdLow</output>
                </div>
                <input class="SaveNotesBtn" type="submit" value="Save" @onclick="SaveNotificationSettings">
            </EditForm>
        </div>
    </div>
}

@code {
    [Parameter] public LoginUser user { get; set; }
    private string link;
    private bool showBadConnection = false;

    class NotificationSettings {
        public float thresholdLow;
        public float thresholdHigh;
        public string noteLow;
        public string noteHigh;
    }
    NotificationSettings nSettings = new NotificationSettings();
    private int idLow;
    private int idHigh;

    protected override async Task OnInitializedAsync() {
        link = user.NSLink;
        await GetNotificationSettings();
    }

    private async Task GetNotificationSettings() {
        if (!string.IsNullOrWhiteSpace(link)) {
            var notificationSettings = await Network.GetNotificationSettings(user.UserID);
            foreach (NotificationData nData in notificationSettings) {
                if (nData.ThresholdType == ThresholdType.High) {
                    nSettings.thresholdHigh = nData.Threshold;
                    nSettings.noteHigh = nData.Note;
                    idHigh = nData.ID;
                }

                if (nData.ThresholdType == ThresholdType.Low) {
                    nSettings.thresholdLow = nData.Threshold;
                    nSettings.noteLow = nData.Note;
                    idLow = nData.ID;
                }
            }
        }
    }

    private async Task SaveNotificationSettings() {
        await Network.UpdateNotificationSetting(idLow, nSettings.noteLow, nSettings.thresholdLow, ThresholdType.Low, NotificationType.Warning);
        await Network.UpdateNotificationSetting(idHigh, nSettings.noteHigh, nSettings.thresholdHigh, ThresholdType.High, NotificationType.Warning);
    }

    private async Task RemoveLink() {
        if (await Network.UpdateNSLink("")) {
            user.NSLink = "";
        }
    }

    private async Task HandleValidSubmit() {
        string newNSLink = link.Trim().Trim('/');
        if (!string.IsNullOrWhiteSpace(newNSLink) && await Network.UpdateNSLink(newNSLink)) {
            user.NSLink = newNSLink;
        } else {
            showBadConnection = true;
        }
    }
}
