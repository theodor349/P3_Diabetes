@if (Subject != null)
{
    <a>
        <div class="@StabilityString()" @onclick="ChangeTarget">
            <h3>@Subject.GetName()</h3>
            <div>
                <div class="bloodGlucose">
                    <BloodGlucoseNumber isEU="User.UnitOfMeasure" EUValue="Subject.PumpData.BloodGlucose" LastRecieved="Subject.PumpData.LastReceived"></BloodGlucoseNumber>
                    @if (Subject.PumpData.BloodGlucose != -1)
                    {
                        <DeltaIcon Status="Subject.PumpData.Status"></DeltaIcon>
                    }
                </div>
                <div>
                    <BatteryIcon BatteryStatus="Subject.PumpData.BatteryStatus"></BatteryIcon>
                </div>
                <div>
                    <InsulinIcon InsulinStatus="Subject.PumpData.InsulinStatus"></InsulinIcon>
                </div>
            </div>
        </div>
    </a>
}
@code {
    [Parameter] public Subject Subject { get; set; }
    [Parameter] public EventCallback<string> TargetSubjectChanged { get; set; }
    [Parameter] public LoginUser User { get; set; }

    private void ChangeTarget()
    {
        TargetSubjectChanged.InvokeAsync(Subject.ID);
    }
    private bool IsOutOfThreshold()
    {
        bool IsOutOfThreshold = false;
        foreach (var n in Subject.NotificationDatas)
        {
            if (n.ThresholdType == ThresholdType.High)
            {
                if (Subject.PumpData.BloodGlucose > n.Threshold)
                {
                    IsOutOfThreshold = true;
                }
            }
            else
            {
                if (Subject.PumpData.BloodGlucose < n.Threshold)
                {
                    IsOutOfThreshold = true;
                }
            }
        }
        return IsOutOfThreshold;
    }
    private string StabilityString()
    {
        if (IsOutOfThreshold())
        {
            return "unStable";
        }
        else
        {
            return "stable";
        }
    }
}
