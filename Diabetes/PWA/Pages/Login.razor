@inject HttpClient Http
<br>
<br>
<div class="loginBox">
    <img class="logoImg" src="/img/appLogo.svg" alt="">
    <br><br>
    <EditForm Model="@credentials" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <InputText id="email" @bind-Value="credentials.Email" />
        <InputText type="password" placeholder="Password" @bind-Value="@credentials.Password" />

        <button type="submit">Log In</button>
    </EditForm>
    <form class="" action="index.html" method="post">
        <input autocomplete="off" type="text" placeholder="E-mail or phone number" id="username" name="fname" value=""><br><br>

        <input type="password" placeholder="Password" id="password" name="lname" value=""><br><br>
        <div class="notificationBtn" type="submit" value="Log in">Log in - @name</div>
    </form>
    <div class="notificationBtn forgotPasswordBtn">Forgot password</div>
    <br><hr>
    <a href="signUp.html"><div class="notificationBtn registerBtn">Sign up</div></a>
</div>

@code {
    [Parameter]
    public EventCallback<LoginUser> loggedIn { get; set; }

    private LoginCredential credentials = new LoginCredential();
    private string name = "test";

    private async Task HandleValidSubmit()
    {
        var user = await GetLoginChredentials();
        await loggedIn.InvokeAsync(user);
    }

    private async Task<LoginUser> GetLoginChredentials()
    {
        return await Http.GetFromJsonAsync<LoginUser>("api/Token/get.json");
    }

    class LoginCredential
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; }
        [Required]
        [MinLength(6)]
        public string Password { get; set; }
    }
}
