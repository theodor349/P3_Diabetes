@page "/"
@inject HttpClient Http

@if (loggedInUser != null)
{
    <SubjectsUpdater subjectsUpdated="SubjectsUpdated" user="loggedInUser"></SubjectsUpdater>

    @if (focusedNotification.Count > 0)
    {
        <FullscreenNotification notificationData="focusedNotification.First()" notificationButtonClicked="NotificationButtonClicked"></FullscreenNotification>
    }
    else
    {
        @if (page == 1)
        {
            <OverView></OverView>
        }
        else if (page == 2)
        {
            <Profile></Profile>
        }
        else
        {
            <Details subject="targetSubject" notifications="notifications" notificationClicked="NotificationClicked"></Details>
        }

        <section class="navMenu">
            <div @onclick="() => SetPage(0)">
                <i class="fa fa-user-circle-o"></i>
            </div>
            <div @onclick="() => SetPage(1)">
                <i class="fa fa-users"></i>
            </div>
            <div @onclick="() => SetPage(2)">
                <i class="fa fa-gear"></i>
            </div>
        </section>
    }
}
else
{
    <Login loggedIn="(user) => loggedInUser = user"></Login>
}

@code {
    private int page = 0;
    private Subject targetSubject;
    private Dictionary<string, Subject> subjects = new Dictionary<string, Subject>();
    private LoginUser loggedInUser;
    private List<NotificationData> notifications = new List<NotificationData>();
    private Stack<NotificationData> focusedNotification = new Stack<NotificationData>();

    protected override async Task OnInitializedAsync()
    {
        notifications = new List<NotificationData>()
        {
            new NotificationData(){Mesage = "Message 1", Type = NotificationType.Message, Name = "Theodor Risager", LongMessage = "Theodor Risager's pump is low on Insulin", IconClassName = "fa fa-thermometer-quarter"},
            new NotificationData(){Mesage = "Warning 1", Type = NotificationType.Warning, Name = "Thomas Bowman", LongMessage = "Thomas Bowman's pump is low on Insulin", IconClassName = "fa fa-thermometer-quarter"},
            new NotificationData(){Mesage = "Message 2", Type = NotificationType.Message, Name = "Tais Hors" , LongMessage = "Tais Hors is a little tired", IconClassName = "fa fa-thermometer-quarter"},
        };
    }

    private void SetPage(int p)
    {
        page = p;
    }

    private void SubjectsUpdated(SubjectList subjectList)
    {
        foreach (var subject in subjectList.Subjects)
        {
            Console.WriteLine(subject);
            UpdateSubject(subject);
        }
    }

    private void UpdateSubject(Subject s)
    {
        if (targetSubject == null)
            targetSubject = s;
        else if(s.ID.Equals(targetSubject.ID))
            targetSubject = s;

        if (subjects.ContainsKey(s.ID))
            subjects[s.ID] = s;
        else
            subjects.Add(s.ID, s);
    }

    private void NewTargetSubject(string id)
    {
        targetSubject = subjects[id];
    }

    /// <summary>
    /// TEMP
    /// </summary>

    private void NotificationButtonClicked(NotificationButtonType type)
    {
        var n = focusedNotification.Pop();
        if (type == NotificationButtonType.Dismiss)
            notifications.Remove(n);
    }

    private void NotificationClicked(NotificationData data)
    {
        focusedNotification.Push(data);
    }
}
